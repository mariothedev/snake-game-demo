{"version":3,"sources":["Timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","forwardRef","props","ref","useState","seconds","setSeconds","isActive","setIsActive","useImperativeHandle","reset","toggle","useEffect","interval","setInterval","clearInterval","className","Keys","move","initState","grid","rowLength","colLength","row","cols","col","push","initGrid","snake","head","tail","food","Math","floor","random","score","showGrid","lost","message","inProgress","highScore","reducer","state","action","type","newState","App","useReducer","dispatch","childRef","useRef","handleKeyPress","e","which","handleRestart","gameEngine","document","addEventListener","removeEventListener","styleCell","cell","style","find","t","randomizeFood","newFood","getHighScore","localStorage","getItem","snakeAteFood","didSnakeAteFood","didSnakeCollideWithSelfOrWall","resetGameEngine","x","y","nextState","pop","length","current","restart","setItem","updateHighScore","class","checked","onChange","onClick","map","actorStyle","key","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc3dd245.chunk.js","sourcesContent":["import React, { forwardRef, useState, useEffect, useImperativeHandle } from 'react';\n\nconst Timer = forwardRef((props, ref) => {\n    const [seconds, setSeconds] = useState(0);\n    const [isActive, setIsActive] = useState(false);\n\n    useImperativeHandle(ref, () => ({\n        reset() {\n            setSeconds(0);\n            setIsActive(true);\n        },\n        toggle() {\n        setIsActive(!isActive);\n    }\n\n    }));\n\n\n    useEffect(() => {\n        let interval = null;\n        if (isActive) {\n            interval = setInterval(() => {\n                setSeconds(seconds => seconds + 1);\n            }, 1000);\n        } else if (!isActive && seconds !== 0) {\n            clearInterval(interval);\n        }\n        return () => clearInterval(interval);\n    }, [isActive, seconds]);\n    return (\n        <div className=\"app\">\n            <div className=\"time\">\n                time : {seconds}s\n      </div>\n        </div>\n    );\n});\n\nexport default Timer;","import React, { useEffect, useRef, useReducer } from 'react';\nimport './App.css';\nimport Timer from \"./Timer\"\n\n\nconst Keys = {\n  Space: 32,\n  Left: 37,\n  Up: 38,\n  Right: 39,\n  Down: 40,\n  a: 65,\n  s: 83,\n  w: 87,\n  d: 68\n}\n\nlet move = Keys.Right;\nconst grid = initGrid(30, 30);\nconst initState = {\n  grid,\n  snake: {\n    head: {\n      row: 5,\n      col: 9,\n    },\n    tail: [],\n  },\n  food: {\n    row: Math.floor(Math.random() * 5),\n    col: Math.floor(Math.random() * 5),\n  },\n  score: 0,\n  showGrid: true,\n  lost: false,\n  message: 'Click start button or any key on keyboard to start the game.',\n  inProgress: false,\n  highScore: 0,\n}\n\nfunction initGrid(rowLength = 20, colLength = 20) {\n  const grid = [];\n  for (let row = 0; row < rowLength; row++) {\n    const cols = [];\n    for (let col = 0; col < colLength; col++) {\n      cols.push({\n        row,\n        col\n      });\n    }\n    grid.push(cols);\n  }\n  return grid;\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'game_lost':\n      return {\n        ...state,\n        showGrid: state.showGrid,\n        lost: true,\n        inProgress: false,\n        highScore: action.highScore\n      }\n    case 'update':\n      return {\n        ...state,\n        ...action.newState\n      }\n\n    case 'toggle_grid':\n      return {\n        ...state,\n        showGrid: !state.showGrid\n      };\n    case 'update_grid':\n      return {\n        ...state,\n        grid: action.grid,\n      }\n\n    case 'restart':\n      let newState = {\n        ...initState,\n        inProgress: true,\n        highScore: action.highScore,\n        grid: state.grid,\n        showGrid: state.showGrid,\n      }\n      return newState;\n    default: {\n      return state;\n    }\n  }\n};\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initState);\n  const { score, snake, message, inProgress } = state;\n  const childRef = useRef();\n\n  // Keyboard events\n  const handleKeyPress = (e) => {\n    if (!inProgress) handleRestart()\n    else if (e.which === Keys.Left || e.which === Keys.a) {\n      move = Keys.Left;\n    }\n    else if (e.which === Keys.Right || e.which === Keys.d) {\n      move = Keys.Right;\n    }\n    else if (e.which === Keys.Up || e.which === Keys.w) {\n      move = Keys.Up;\n    }\n    else if (e.which === Keys.Down || e.which === Keys.s) {\n      move = Keys.Down;\n    }\n  }\n\n  useEffect(() => {\n    let interval = null;\n    if (inProgress) {\n      interval = setInterval(() => {\n        gameEngine()\n      }, 100);\n    } else if (!inProgress) {\n      clearInterval(interval);\n    }\n    return function cleanup() {\n      clearInterval(interval)\n    }\n  }, [inProgress, snake.head]);\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyPress);\n    return function cleanup() {\n      document.removeEventListener('keydown', handleKeyPress);\n    }\n  });\n\n  const drawGrid = () => {\n    const { grid } = state;\n    return (\n      grid.map((row) => {\n        return row.map(cell => {\n          let actorStyle = styleCell(cell);\n          return <div key={cell.row + cell.col} className={actorStyle} />\n        });\n      })\n    );\n  }\n\n  const styleCell = (cell) => {\n    const { snake, food, showGrid } = state;\n    let style = `cell `;\n    if (snake.head.row === cell.row && snake.head.col === cell.col) {\n      style = `cell head`;\n    }\n    else if (food.row === cell.row && food.col === cell.col) {\n      style = `cell food`;\n    }\n    else if (snake.tail.find(t => t.row === cell.row\n      && t.col === cell.col)) {\n      style = `cell tail`;\n    }\n\n    style = showGrid ? style + ' cell-border' : style;\n    return style;\n  }\n  const randomizeFood = () => {\n    const { snake } = state;\n    const newFood = {\n      row: Math.floor(Math.random() * 30),\n      col: Math.floor(Math.random() * 30),\n    }\n\n    //edge case where generated random number is same\n    if (snake.head.row === newFood.row\n      && snake.head.col === newFood.col) {\n      return randomizeFood();\n    }\n    return newFood;\n  }\n  const updateHighScore = () => {\n    let highScore = localStorage.getItem('highScore') || 0;\n    if (score > highScore) {\n      highScore = score;\n    }\n    localStorage.setItem('highScore', highScore);\n  }\n  const getHighScore = () => {\n    return localStorage.getItem('highScore') || 0;\n  }\n  let highScore = getHighScore();\n  const gameEngine = () => {\n    const snakeAteFood = didSnakeAteFood();\n    const collideWithSelfOrWall = didSnakeCollideWithSelfOrWall();\n\n\n    if (collideWithSelfOrWall) {\n      resetGameEngine();\n      return;\n    }\n\n    let x = 1, y = 0;\n    if (move === Keys.Left) {\n      [x, y] = [-1, 0];\n    } else if (move === Keys.Right) {\n      [x, y] = [1, 0];\n    } else if (move === Keys.Up) {\n      [x, y] = [0, -1];\n    } else if (move === Keys.Down) {\n      [x, y] = [0, 1];\n    }\n    const nextState = {\n      snake: {\n        ...state.snake,\n        head: {\n          row: state.snake.head.row + y,\n          col: state.snake.head.col + x\n        },\n        tail: [state.snake.head, ...state.snake.tail]\n      },\n      food: snakeAteFood ?\n        randomizeFood() : state.food,\n      score: snakeAteFood ? score + 1 : score,\n    };\n    if (!snakeAteFood) {\n      nextState.snake.tail.pop();\n    }\n\n    dispatch({\n      type: 'update',\n      newState: nextState\n    });\n  }\n\n  const didSnakeAteFood = () => {\n    const { food, snake } = state;\n    return food.row === snake.head.row &&\n      food.col === snake.head.col;\n  }\n\n  const didSnakeCollideWithSelfOrWall = () => {\n    const { snake, grid } = state;\n    const { head, tail } = snake;\n    return (snake.head.col >= grid.length ||\n      snake.head.row >= grid.length ||\n      snake.head.col < 0 ||\n      snake.head.row < 0) ||\n      tail.find(t => t.row === head.row\n        && t.col === head.col)\n  }\n  const onShowGridChange = (e) => {\n    dispatch({\n      type: 'toggle_grid'\n    });\n  }\n  const handleRestart = () => {\n    childRef.current.reset()\n    restart()\n  }\n  const resetGameEngine = () => {\n    childRef.current.toggle();\n    updateHighScore();\n    highScore = getHighScore()\n    dispatch({ type: 'game_lost', highScore });\n  }\n  const restart = () => {\n    highScore = getHighScore();\n    dispatch({\n      type: 'restart',\n      highScore\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"info-wrapper\">\n        <Timer ref={childRef} />\n\n        <label class=\"checkbox-wrapper\">show grid\n  <input type=\"checkbox\"\n            checked={state.showGrid}\n            onChange={onShowGridChange}\n            className=\"toggle-grid\" />\n          <span class=\"check-mark\"></span>\n        </label>\n        <div className=\"checkbox-wrapper\" >\n\n\n        </div>\n        {<div>Score : {score}</div>}\n        <div>high-score : {highScore} </div>\n        <button onClick={handleRestart} className=\"restart\">Restart/Start</button>\n\n      </div>\n      <div className=\"message\">{message}</div>\n      <div className=\"grid-container\">\n        <div className=\"grid\">\n          {drawGrid()}\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\n\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}